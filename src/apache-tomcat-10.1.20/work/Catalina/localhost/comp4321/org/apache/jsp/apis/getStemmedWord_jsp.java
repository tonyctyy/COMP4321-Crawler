/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.20
 * Generated at: 2024-05-07 06:05:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.apis;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import IRUtilities.*;
import jdbm.RecordManager;
import jdbm.RecordManagerFactory;
import jdbm.htree.HTree;
import jdbm.helper.FastIterator;
import java.io.*;
import java.util.*;

public final class getStemmedWord_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("IRUtilities");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("jdbm.RecordManager");
    _jspx_imports_classes.add("jdbm.RecordManagerFactory");
    _jspx_imports_classes.add("jdbm.helper.FastIterator");
    _jspx_imports_classes.add("jdbm.htree.HTree");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("application/json; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    Integer numKeyword = Integer.parseInt(request.getParameter("numKeyword"));
    Boolean useFreq = Boolean.parseBoolean(request.getParameter("freq").trim());

    //System.out.println(numKeyword);
    //System.out.println(useFreq);

    // here is the part for database
    String dbPath = getServletContext().getRealPath("/WEB-INF/database/database");

    RecordManager recman = RecordManagerFactory.createRecordManager(dbPath);

    long WordMappingID = recman.getNamedObject("WordMapping");
    HTree WordMapping = HTree.load(recman, WordMappingID);

    long InvertedBodyWordID = recman.getNamedObject("InvertedBodyWord");
    HTree InvertedBodyWord = HTree.load(recman, InvertedBodyWordID);

    long InvertedTitleWordID = recman.getNamedObject("InvertedTitleWord");
    HTree InvertedTitleWord = HTree.load(recman, InvertedTitleWordID);

    Map<String, Integer> frequencyMap = new HashMap<>();
    Map<String, Double> tfidfMap = new HashMap<>();
    Map<String, Double> freqXtfidfMap = new HashMap<>();

    FastIterator WordMappingKeys = WordMapping.keys();
    String key;

    while ((key = (String) WordMappingKeys.next()) != null) {
        String wordID = WordMapping.get(key).toString();
        String BodyValue = (String) InvertedBodyWord.get(wordID);
        String TitleValue = (String) InvertedTitleWord.get(wordID);
        // System.out.println(key + ": " + wordID);

        Integer frequency = 0;
        double tfidf = 0.0;
        double freqXtfidf = 0.0;

        if (BodyValue != null) {
            String [] BodyValues = BodyValue.split(",");
            for (String val : BodyValues) {
                String[] parts = val.split("\\|");
                frequency += Integer.parseInt(parts[1]);
                tfidf += Double.parseDouble(parts[2]);
                freqXtfidf += Integer.parseInt(parts[1]) * Double.parseDouble(parts[2]);
            }
        }
        
        if (TitleValue != null) {
            String [] TitleValues = TitleValue.split(",");
            for (String val : TitleValues) {
                String[] parts = val.split("\\|");
                frequency += Integer.parseInt(parts[1]);
                tfidf += Double.parseDouble(parts[2]);
                freqXtfidf += Integer.parseInt(parts[1]) * Double.parseDouble(parts[2]);
            }
        }
        frequencyMap.put(key, frequency);
        tfidfMap.put(key, tfidf);
        freqXtfidfMap.put(key, freqXtfidf);
        //System.out.println(key + ": " + frequencyMap.get(key));
        // System.out.println(tfidfMap.get(key));
    }

    // String wordID = WordMapping.get("interspers archiv").toString();
    // String BodyValue = (String) InvertedBodyWord.get(wordID);
    // String TitleValue = (String) InvertedTitleWord.get(wordID);
    // System.out.println(BodyValue);
    // System.out.println(TitleValue);
    // System.out.println(frequencyMap.get("interspers archiv"));
    // System.out.println(tfidfMap.get("interspers archiv"));

    // System.out.println("-----------------------------------------------------");

    StringBuilder json = new StringBuilder();
    json.append("{\"keywords\":[");

    Integer count = 0;

    if (useFreq) {
        List<Map.Entry<String, Double>> freqXtfidfList = new ArrayList<>(freqXtfidfMap.entrySet());
        freqXtfidfList.sort(Map.Entry.comparingByValue(Comparator.reverseOrder()));
        //System.out.println(freqXtfidfList);

        // // Sort the frequencyMap by values in descending order
        // List<Map.Entry<String, Integer>> frequencyList = new ArrayList<>(frequencyMap.entrySet());
        // frequencyList.sort(Map.Entry.comparingByValue(Comparator.reverseOrder()));
        // //System.out.println(frequencyList);
        for (Map.Entry<String, Double> entry : freqXtfidfList) {
            // System.out.println(entry.getKey() + ": " + entry.getValue());
            count++;
            if (count > numKeyword) {
                break;
            }
            String tempTxt = String.format("%.2f", entry.getValue()); 
            json.append("\"").append(entry.getKey()).append(": ").append(tempTxt).append("\",");
        }
        // List<Map.Entry<String, Integer>> topFrequencyList = frequencyList.subList(0, Math.min(frequencyList.size(), numKeyword));
        // System.out.println(topFrequencyList);
    } else {
        // Sort the tfidfMap by values in descending order
        List<Map.Entry<String, Double>> tfidfList = new ArrayList<>(tfidfMap.entrySet());
        tfidfList.sort(Map.Entry.comparingByValue(Comparator.reverseOrder()));
        for (Map.Entry<String, Double> entry : tfidfList) {
            // System.out.println(entry.getKey() + ": " + entry.getValue());
            count++;
            if (count > numKeyword) {
                break;
            }
            String tempTxt = String.format("%.2f", entry.getValue()); 
            json.append("\"").append(entry.getKey()).append(": ").append(tempTxt).append("\",");
        }
        // List<Map.Entry<String, Double>> topTfidfList = tfidfList.subList(0, Math.min(tfidfList.size(), numKeyword));
        // System.out.println(topTfidfList);
    }   

    // Remove the trailing comma if any
    if (json.charAt(json.length() - 1) == ',') {
        json.deleteCharAt(json.length() - 1);
    }

    json.append("]}");

    // Set response content type to JSON
    response.setContentType("application/json");
    response.setCharacterEncoding("UTF-8");

    //System.out.println(json.toString());

    // Write JSON data to response
    out.print(json.toString());

    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
